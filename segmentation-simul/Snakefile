# SV type parameters
SIZE   = [100000, 400000, 1000000, 2000000]
TYPE   = ["het_del", "het_inv", "het_dup", "hom_del", "hom_inv", "hom_dup", "inv_dup"]
VAF    = [1, 0.5, 0.2, 0.1, 0.05]

# cell simulation parameters
SCES   = [4]
CELLS  = [160]
WINDOW = [50000]
COV    = [10]
METHOD = ["tilingArray", "jointSeg", "mosaiCatcher"]

rule all:
    input:      #expand("plots/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.qc_with_svs.pdf", \
                #       type = TYPE, size = SIZE, vaf = VAF, sce = SCES, cells = CELLS, window = WINDOW, cov = COV),
                #expand("segments/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.segment_{seg}.pdf", \
                #       type = TYPE, size = SIZE, vaf = VAF, sce = SCES, cells = CELLS, window = WINDOW, cov = COV, \
                #       seg = METHOD),
                #expand("roc/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.segment_{method}.pdf", \
                #       type = TYPE, size = SIZE, vaf = VAF, sce = SCES, cells = CELLS, window = WINDOW, cov = COV, \
                #       method = METHOD),
                expand("roc/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.{method}.txt",
                        cells = CELLS,
                        window = WINDOW,
                        cov = COV,
                        sce = SCES,
                        size = SIZE,
                        vaf = VAF,
                        type = ["het_del"],
                        method = METHOD)



################################################################################
# Simulate cells                                                               #
################################################################################

rule sample_SVs:
    output:     "svs/class-{type}_size-{size}_vaf-{vaf}.txt"
    shell:      """
                /g/funcgen/bin/Rscript scripts/simulate_SVs.R 200 {wildcards.type} {wildcards.size} {wildcards.vaf} {output}
                """

rule simulate_cells:
    input:      "svs/class-{type}_size-{size}_vaf-{vaf}.txt"
    output:     "counts/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.txt.gz"
    shell:      """
                /g/korbel/meiers/tools/mosaicatcher/mosaicatcher/build/mosaicatcher \
                simulate      -o {output} \
                              -S {output}.sces.txt \
                              -s {wildcards.sce} \
                              -n {wildcards.cells} \
                              -c {wildcards.cov} \
                              -C {wildcards.cov} \
                              -w {wildcards.window} \
                              {input}
                """

################################################################################
# Segmentation algorithms                                                      #
################################################################################

rule call_segments_tiling:
    input:      "counts/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.txt.gz"
    output:     "segmentation/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.tilingArray.txt"
    shell:      """
                /g/funcgen/bin/Rscript scripts/segment_tA.R {input} {wildcards.window} {output}
                """

rule call_segments_jointseg:
    input:      "counts/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.txt.gz"
    output:     "segmentation/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.jointSeg.txt"
    shell:      """
                /g/funcgen/bin/Rscript scripts/segment_js.R {input} {wildcards.window} {output}
                """

rule call_segments_mosaicatcher:
    input:      "counts/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.txt.gz"
    output:     "segmentation/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.mosaiCatcher.txt"
    shell:      """
                tmp=$(mktemp)
                echo $tmp
                /g/korbel/meiers/tools/mosaicatcher/mosaicatcher/build/mosaicatcher segment -o $tmp -m 0.3 -M 60000000 {input}
                awk 'NR>1 {{ OFS="\t"; print $1, $3, $4 }}' $tmp > {output}
                rm $tmp
                """



################################################################################
# Calculating performance                                                      #
################################################################################

rule calc_ROC:
    input:      bp  = "segmentation/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.{method}.txt",
                sv  = "svs/class-{type}_size-{size}_vaf-{vaf}.txt"
    output:     "roc/cells-{cells}_window-{window}/cov-{cov}_sces-{sce}/class-{type}_size-{size}_vaf-{vaf}.{method}.txt"
    params:     w = lambda wc: wc.window
    script:     "scripts/calc_roc.R"






################################################################################
# Plot functions                                                               #
################################################################################



rule plot_cell:
    input:      d = "counts/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.txt.gz",
                sv = "svs/{type}_size{size}_vaf{vaf}.txt"
    output:     "plots/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.qc_with_svs.pdf"
    shell:      """
                /g/funcgen/bin/Rscript scripts/qc2.R {input.d} {input.sv} {output}
                """


rule plot_segments:
    input:      d = "counts/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.txt.gz",
                sv = "svs/{type}_size{size}_vaf{vaf}.txt",
                seg = "segments/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.segment_{seg}.txt"
    output:     "segments/{type}_size{size}_vaf{vaf}.n{cells}_w{window}_cov{cov}_sces{sce}.segment_{seg}.pdf"
    shell:      """
                /g/funcgen/bin/Rscript scripts/plot_segmentation.R {input.d} {input.sv} {input.seg} 20 {wildcards.window} {output}
                """





